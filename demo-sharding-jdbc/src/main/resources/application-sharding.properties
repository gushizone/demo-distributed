# 分库分表配置

# 本配置文件基于 shardingsphere-jdbc-core-spring-boot-starter:5.0.0-alpha, 版本间存在差异，不可套用
# https://shardingsphere.apache.org/document/5.0.0-alpha/cn/overview/
# https://github.com/apache/shardingsphere/blob/5.0.0-alpha/examples/README_ZH.md
# 此版本存在bug, 部分选项一定要配置:
# - 数据common配置
# - 主键生成策略

#spring.shardingsphere.datasource.names=ds0
spring.shardingsphere.datasource.names=ds1,ds2

spring.shardingsphere.datasource.common.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.common.driver-class-name=com.mysql.jdbc.Driver

spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3306/demo_sharding?userUnicode=true&characterEncoding=utf8
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=root

spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:13306/demo_sharding?userUnicode=true&characterEncoding=utf8
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123456

spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://localhost:23306/demo_sharding?userUnicode=true&characterEncoding=utf8
spring.shardingsphere.datasource.ds2.username=root
spring.shardingsphere.datasource.ds2.password=123456

# 用于单分片键的标准分片场景
spring.shardingsphere.rules.sharding.tables.order.actual-data-nodes=ds$->{1..2}.order_$->{1..2}
# 分库
spring.shardingsphere.rules.sharding.tables.order.database-strategy.standard.sharding-column=user_id
spring.shardingsphere.rules.sharding.tables.order.database-strategy.standard.sharding-algorithm-name=order-database-sharding
# 分表
spring.shardingsphere.rules.sharding.tables.order.table-strategy.standard.sharding-column=id
#spring.shardingsphere.rules.sharding.tables.order.table-strategy.standard.sharding-algorithm-name=order-table-sharding
spring.shardingsphere.rules.sharding.tables.order.table-strategy.standard.sharding-algorithm-name=custom-order-table-sharding

# 内置分片算法
# 根据 user_id 分库
spring.shardingsphere.rules.sharding.sharding-algorithms.order-database-sharding.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.order-database-sharding.props.algorithm-expression=ds$->{(user_id + 1) % 2 + 1}
# 根据 id 分表
spring.shardingsphere.rules.sharding.sharding-algorithms.order-table-sharding.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.order-table-sharding.props.algorithm-expression=order_$->{(id + 1) % 2 + 1}

# 自定义分片算法 - SPI
# 根据 id 分表
spring.shardingsphere.rules.sharding.sharding-algorithms.custom-order-table-sharding.type=CUSTOM_ORDER_TABLE_SHARDING
spring.shardingsphere.rules.sharding.sharding-algorithms.custom-order-table-sharding.props.must-use=this_is_bug


# 广播表
spring.shardingsphere.rules.sharding.broadcast-tables=sys_dict


# 主键生成策略（雪花算法）- SnowflakeKeyGenerateAlgorithm
# 默认主键生成策略，仅当 id 为 null 且 非自增
spring.shardingsphere.rules.sharding.tables.default-database-strategy.key-generate-strategy.column=id
spring.shardingsphere.rules.sharding.tables.default-database-strategy.key-generate-strategy.key-generator-name=snowflake

spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.key-generators.snowflake.props.worker-id=1

# 打印sql
spring.shardingsphere.props.sql-show=true